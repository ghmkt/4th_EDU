# 제출시 파일명은 Session06 이름 으로 해주세요.

# 1. LDA 코드를 활용하여 본인이 원하는 텍스트를 넣어 보기 => 텍스트 원본 파일 + LDA 결과 첨부 + 본인 결과 해석
# 2. Word2Vec 코드를 활용하여 본인이 원하는 텍스트 넣어 보기 => 텍스트 + 원하는 키워드 5개의 유사 단어 추출한 후 결과 첨부   


#LDA
import nltk

file = open(r"D:\Growth Hackers\CHI.txt","r")
text = file.read()

documents = []
documents.append(nltk.word_tokenize(text))
print(documents)

import random
from collections import Counter

#조건부 확률 분포 정의를 위한 준비

#topic의 개수
K = 4

#1. 각 토픽이 각 문서에 할당되는 횟수
#counter로 구성된 list
#각각의 counter는 각 문서를 의미함
document_topic_counts = [Counter() for _ in documents]

#2. 각 단어가 각 토픽에 할당되는 횟수
# 각각의 counter는 각 토픽을 의미함
topic_word_counts = [Counter() for _ in range(K)] 

#3. 각 토픽에 할당되는 총 단어 수
# 각각의 숫자는 각 토픽을 의미함
topic_counts = [0 for _ in range(K)] 

#4. 각 문서에 포함되는 총 단어의 수
# 각각의 숫자는 각 문서를 의미함
document_lengths = [len(d) for d in documents]

#5. 단어 종류의 수
distinct_words = set(word for document in documents for word in document) 
W = len(distinct_words)

#6. 총 문서의 수
D = len(documents)

def p_topic_given_document(topic, d, alpha=0.1):
    # 문서 d의 모든 단어 가운데 topic에 속하는
    # 단어의 비율 (alpha를 더해 smoothing)
    return ((document_topic_counts[d][topic] + alpha) /
            (document_lengths[d] + K * alpha))

def p_word_given_topic(word, topic, beta=0.1):
    # topic에 속한 단어 가운데 word의 비율
    # (beta를 더해 smoothing)
    return ((topic_word_counts[topic][word] + beta) /
            (topic_counts[topic] + W * beta))

def topic_weight(d, word, k):
    # 문서와 문서의 단어가 주어지면
    # k번째 토픽의 weight를 반환
    return p_word_given_topic(word, k) * p_topic_given_document(k, d)

def choose_new_topic(d, word):
    return sample_from([topic_weight(d, word, k) for k in range(K)])

#랜덤으로 생성된 weight로부터 인덱스를 생성함
def sample_from(weights):
     total = sum(weights)
     rnd = total * random.random()       # uniform between 0 and total
     for i, w in enumerate(weights):
         rnd -= w                        # return the smallest i such that
         if rnd <= 0: return i           # sum(weights[:(i+1)]) >= rnd
         
random.seed(0)

#topic의 개수
K = 4

# 각 단어를 임의의 토픽에 배정
document_topics = [[random.randrange(K) for word in document]
                   for document in documents]

# 랜덤 초기화한 상태에서 AB를 구하는 데 필요한 숫자 계산하기
for d in range(D):
    for word, topic in zip(documents[d], document_topics[d]):
        document_topic_counts[d][topic] += 1
        topic_word_counts[topic][word] += 1
        topic_counts[topic] += 1
        
# 조건부 확률 분포를 이용하여 (토픽-단어), (문서-토픽)에 대한 깁스 샘플링 실행하기
for iter in range(1000): 
    for d in range(D): 
        for i, (word, topic) in enumerate(zip(documents[d], 
                                              document_topics[d])): 
 
 
           # remove this word / topic from the counts
           # so that it doesn't influence the weights 
            document_topic_counts[d][topic] -= 1 
            topic_word_counts[topic][word] -= 1 
            topic_counts[topic] -= 1 
            document_lengths[d] -= 1 
 
           # choose a new topic based on the weights 
            new_topic = choose_new_topic(d, word) 
            document_topics[d][i] = new_topic 

 
           # and now add it back to the counts 
            document_topic_counts[d][new_topic] += 1 
            topic_word_counts[new_topic][word] += 1 
            topic_counts[new_topic] += 1 
            document_lengths[d] += 1
            
#각 토픽에 가장 영향력이 높은 (weight)값이 큰 단어 탐색
for k, word_counts in enumerate(topic_word_counts): 
         for word, count in word_counts.most_common(): 
             if count > 4: print (k, word, count) 
             
topic_names = ["emotion recognition interface",
               "virtual reality",
               "seamless sensing system",
               "EEG and eye-tracking"]

for document, topic_counts in zip(documents, document_topic_counts): 
         print (document) 
         for topic, count in topic_counts.most_common(): 
             if count > 0: 
                 print (topic_names[topic], count)
                 
#결과
#EEG and eye-tracking 283
#virtual reality 231
#emotion recognition interface 128
#seamless sensing system 127

#논문 키워드로 topic names를 설정하였습니다! count 많은 순서는 잘 맞지 않지만... 
                 
                 
#word2vec                 
from gensim.models.word2vec import Word2Vec
model = Word2Vec(documents,size=100, window=3, min_count=1, sg=1)
model.init_sims(replace=True)

print(model.similarity('biometric', 'eye-tracking'))
#0.0374522

print(model.similarity('interaction', 'emotion'))
#0.0171079

print(model.most_similar("emotion"))
#[('are', 0.2797483801841736), ('as', 0.25365662574768066), ('accessory', 0.24018463492393494), ('efforts', 0.2357182502746582), ('they', 0.2154751569032669), ('enables', 0.2039540559053421), ('expressions', 0.20189639925956726), ('experiments', 0.20028480887413025), ('a', 0.19531723856925964), ('considered', 0.1944124400615692)]

print(model.most_similar("biometric"))
#[('simple', 0.2574533224105835), ('seamlessly', 0.24601773917675018), ('participants', 0.23502501845359802), ('rating', 0.23244042694568634), ('obtained', 0.22394195199012756), ('predicted', 0.21929317712783813), ('explicit', 0.21851913630962372), ('be', 0.2056904137134552), ('if', 0.20299501717090607), ('self-developed', 0.1999061107635498)]

print(model.most_similar("human"))
#[('employed', 0.30593734979629517), ('interactions', 0.27935555577278137), ('’', 0.2676882743835449), ('to', 0.263613760471344), ('immediate', 0.23131228983402252), ('widely', 0.22924888134002686), ('volume', 0.2165910303592682), ('use', 0.2153099626302719), ('responsible', 0.2070010006427765), ('considered', 0.19676560163497925)]

print(model.most_similar("sensing"))
#[('including', 0.3035290837287903), ('them', 0.22745883464813232), ('Through', 0.21896418929100037), ('experts', 0.21104857325553894), ('based', 0.20901112258434296), ('galvanic', 0.2010420858860016), ('access', 0.19804108142852783), ('considered', 0.19194893538951874), ('feasibility', 0.18910492956638336), ('attracted', 0.18382999300956726)]

#생각보다 유사할 것 같은 단어가 잘 연결이 안 된 것 같습니다ㅠㅠ 글을 잘못 쓴 것 같기도 하군요...
