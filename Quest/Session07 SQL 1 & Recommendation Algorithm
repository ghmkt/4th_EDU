from collections import defaultdict; import pandas as pd; import numpy as np
import surprise
import pandas as pd
import numpy as np
from collections import defaultdict, Counter
# 제출 시 제목을 Session07 이름으로 해주세요.

data = surprise.Dataset.load_builtin('ml-100k') # 내장된 영화평 data가 있음
df = pd.DataFrame(data.raw_ratings, columns = ['user', 'item', 'rate', 'id'])
df.head() # 아까 썼던 거랑 같은 양식!

# Surprise 내장 영화 데이터를 로드하여 “UBCF hardcoding.ipynb” 내의 코드를
# 코사인 유사도를 기준으로 KNN 알고리즘을 작성해주세요. (k는 임의로 설정)


# 단, 5-fold Cross Validation을 시행하여, Absolute Error의 평균을 최종적으로 출력해주세요

cnt = Counter(df['user'])
idx_sorted = sorted(list(cnt.keys()), key=lambda x: cnt[x], reverse = True) 
idx = np.zeros(len(df)) # df의 전체 row 길이에 해당하는 vector를 만든 뒤에
for i in idx_sorted[:400]:
    idx += (df['user'] == i) # 빈도 400등까지의 userId에 해당하는 row에 1씩을 더해준 뒤,
idx = np.array(idx, dtype=bool) # Boolean 타입으로 바꾸어 줌. -> Bool Indexing을 위한 밑작업
new_df = df[idx].iloc[:,:3] # 위의 자료를 이용해 인덱싱을 한 뒤 새로운 df를 만드는데, 마지막 열(timestamp)은 날림
del df
new_df.head()
print(len(new_df))

def cos_sim2(x, y, more_than = 5): # 이것은 겹치는 게 5개 이상인 vector 간에 겹치는 column에 한해 cosine 유사도를 반환하는 함수
    idx = (x>0) & (y>0) # 겹치는 부분만 True이고 나머지는 False인 인덱스 벡터를 만듦
    if sum(idx) < more_than: return 0 # minimum 기준을 충족시키지 못하면 유사도가 없는 것으로 반환
    x_n = x[idx]
    y_n = y[idx]
    return np.dot(x_n, y_n) ** 2 / (np.dot(x_n, x_n) * np.dot(y_n, y_n))
    
def find_neighbors(utility_matrix, k, sim_fun): # 주어진 유사도를 기준으로 k개의 neighbor를 구해보자!
    sim_dict = {} # 각 user들의 이웃들을 내포한 딕셔너리로 만들 것임! 1번 유저 이웃 누구누구, 2번 유저 이웃 누구누. 3번 유저 이웃 누구누구.
    for i in utility_matrix.index: # utility_matrix의 index들 = userId들
        ranking = [(0,0)] * k # 무조건 사라지라고 ..!
        for j in utility_matrix.index.drop(i): # i를 제외한 나머지 userId에 대해 반복
            ranking.append((j, sim_fun(utility_matrix.loc[i], utility_matrix.loc[j]))) # (j, simmilarity between i & j) append
            ranking = sorted(ranking, key=lambda x: -x[1])[:k] # 각 튜플의 뒤의 원소를 기준으로 내림차순한 뒤(유클리디언은 오름차순 해야됨), k개까지만 cut
        sim_dict[i] = ranking # 위에서 만든 리스트를 sim_dict의 key = i에 대해 append함
    return sim_dict
    
def prediction(user, movie, neighbors, utility_matrix): # 이제 neighbor들의 평균을 냄으로써 평점을 예측해봅시다
    my_neighbors = neighbors[user] # 지정된 user의 이웃들을 꺼낸 뒤
    rates = []
    for i, _ in my_neighbors:
        r = utility_matrix.loc[i, movie] # 이웃의 해당 영화에 대한 평점을 꺼내옵니다
        if r > 0: rates.append(r) # 정보가 있을 경우에 리스트에 append
    if rates == []: return None # 만약 리스트가 비어있다면, None을 반환 (왜냐면, 이웃 중에 그 영화를 본 사람이 없는 것이므로)
    else: return sum(rates)/len(rates) # 아니라면 평균을 return합시다
    
def testing(test, neighbors, utility_matrix): # test data에 대해 test하는 함수
    predicted = []
    movies = utility_matrix.columns # train data에 있는 영화 목록
    for i in range(len(test)): # test set에 대해 반복을 돌립니다
        movie = test.iloc[i,0]; user = test.iloc[i,1] # 각 row의 movie, user Id를 따옴
        if (user not in neighbors) or (movie not in movies): # 만약 해당 user의 neighbor data가 없거나, movie가 train movie 목록에 없다면
            predicted.append(None) # 그 데이터에 관해서는 test를 할 수 없음
        else: predicted.append(prediction(user, movie, neighbors, utility_matrix)) # 아니라면 예측을 합니다
    return predicted
    
from sklearn.model_selection import KFold

cv = KFold(n_splits=5, shuffle=True, random_state=0)

scores = np.zeros(10)
c = 0

for train_index, test_index in cv.split(new_df):
    # train index 는 리스트로 나오고, 그 리스트에 있는 index들을 기준으로 원래의 new_df에서 train의 df를 찾아줘야함.
    idx = np.zeros(len(new_df)) # df의 전체 row 길이에 해당하는 vector를 만든 뒤에
    print(len(train_index))
    for i in train_index:
        idx += (new_df['user'] == i) # 빈도 400등까지의 userId에 해당하는 row를 true 로 정해준다.
    print(idx)
    idx = np.array(idx, dtype=bool) # Boolean 타입으로 바꾸어 줌. -> Bool Indexing을 위한 밑작업
    train = new_df[idx].iloc[:,:] # 위의 자료를 이용해 인덱싱을 한 뒤 새로운 df를 만드는데, 마지막 열(timestamp)은 날림
    utility_matrix = train.pivot(index='user', columns='item', values='rate').fillna(0) # utility matrix 형태로 바꾸어 줌
    neighbors = find_neighbors(utility_matrix, 10, cos_sim2)
    idx = np.zeros(len(new_df))
    for i in test_index:
        idx += (new_df['user'] == i)
    print(idx)
    idx = np.array(idx, dtype=bool)
    test = new_df[idx].iloc[:,:]
    test['prediction'] = testing(test, neighbors, utility_matrix)
    test['diff'] = test['rate'] - test['prediction']
    scores[c] = np.sqrt((test['diff'] ** 2).mean())
    c += 1
print(scores)
print(np.mean(scores))

# SQL 1
# QUEST 2. sample2 table 이용. 사람들의 이름, 나이, 성인 여부를 구해보세요 (열 이름 별칭 사용)
SQL 1 select name, year(current_timestamp) - year(birthday) + 1 as age, case when year(birthday) <= 2000 then "yes" else "no" end as adult from quest2;
