# 제출 시 제목을 Session07 이름으로 해주세요.

# Recommendation Algorithm

# Surprise 내장 영화 데이터(ml-100k)를 로드하여 “UBCF hardcoding.ipynb” 내의 코드를 따라 UBCF를 해주세요.
# 코사인 유사도를 기준으로 KNN 알고리즘을 작성해주세요. (k는 임의로 설정)
# sklearn 모듈 내의 kfold 함수를 이용해 5-fold Cross Validation을 시행하고, Absolute Error의 평균을 최종적으로 출력해주세요.

#응답
import pandas as pd
import numpy as np
from collections import defaultdict, Counter
import surprise

data = surprise.Dataset.load_builtin('ml-100k') # 내장된 영화평 data가 있음
df = pd.DataFrame(data.raw_ratings, columns = ['user', 'item', 'rate', 'id'])

cnt = Counter(df['user']) # 각 userId가 몇 번 등장했는지 count한 뒤에
idx_sorted = sorted(list(cnt.keys()), key=lambda x: -cnt[x]) # 빈도가 높은 순서대로 userId를 정렬
#내림차순으로 정리하는 코드!

idx = np.zeros(len(df)) 
# df의 전체 row 길이에 해당하는 zero vector를 만든 뒤에
for i in idx_sorted[:400]:
    idx += (df['user'] == i) 
# 빈도 400등까지의 userId에 해당하는 row에 1씩을 더해준 뒤,
idx = np.array(idx, dtype=bool) # Boolean 타입으로 바꾸어 줌. -> Bool Indexing을 위한 밑작업
#400등까지는 True, 400등아니면 False인 Data Array

new_df = df[idx].iloc[:,:3]
#기존 df 에서 400등이내 값만 추출하고 필요없는 id라는 데이터는 삭제!
del df 
# 기존 df를 삭제함.

from sklearn.model_selection import train_test_split
train, test = train_test_split(new_df, test_size=0.3, random_state=42) # 3:7 비율로 test-train split
del new_df; del idx 

utility_matrix = train.pivot(index='user', columns='item', values='rate').fillna(0) 
# utility matrix 형태로 바꾸어 줌
# 즉, 각 row의 정보가 각 user의 정보이고, 각 column의 정보가 각 item에 대한 정보가 되도록
utility_matrix.head()

def cos_sim(x, y): # cosine 유사도 나타내는 함수 정의
    return np.dot(x, y) ** 2 / (np.dot(x, x) * np.dot(y, y))

def find_neighbors(utility_matrix, k, sim_fun): # 주어진 유사도를 기준으로 k개의 neighbor를 구해보자!
    sim_dict = {} # 각 user들의 이웃들을 내포한 딕셔너리로 만들 것임!
    cnt = 0 # 밑에서 반복문 몇 번 돌았는지 확인하려고...
    for i in utility_matrix.index: # utility_matrix의 index들 = userId들
        cnt += 1 # 반복 1회당 카운트 한 번씩 올려주고
        ranking = [(0,0)] * k #(0,0)튜플이 k개 있는 리스트 'ranking' 생성
        for j in utility_matrix.index.drop(i): # i를 제외한 나머지 userId에 대해 반복
            ranking.append((j, sim_fun(utility_matrix.loc[i], utility_matrix.loc[j]))) # (j, simmilarity between i & j) append
            ranking = sorted(ranking, key=lambda x: -x[1])[:k] # 각 튜플의 뒤의 원소를 기준으로 내림차순한 뒤(유클리디언은 오름차순 해야됨), k개까지만 cut
        sim_dict[i] = ranking # 위에서 만든 리스트를 sim_dict의 key = i에 대해 append함
    return sim_dict

def prediction(user, movie, neighbors, utility_matrix): # 이제 neighbor들의 평균을 냄으로써 평점을 예측해봅시다
    my_neighbors = neighbors[user] # 지정된 user의 이웃들을 꺼낸 뒤
    rates = []
    for i, _ in my_neighbors:
        r = utility_matrix.loc[i, movie] # 이웃의 해당 영화에 대한 평점을 꺼내옵니다
        if r > 0: rates.append(r) # 정보가 있을 경우에 리스트에 append 0이면 데이터가 없는거니까
    if rates == []: return None # 만약 리스트가 비어있다면, None을 반환 (왜냐면, 이웃 중에 그 영화를 본 사람이 없는 것이므로)
    else: return sum(rates)/len(rates) # 아니라면 평균을 return합시다
    
def testing(test, neighbors, utility_matrix): # test data에 대해 test하는 함수
    predicted = []
    movies = utility_matrix.columns # train data에 있는 영화 목록
    for i in range(len(test)): # test set에 대해 반복을 돌립니다
        movie = test.iloc[i,0]; user = test.iloc[i,1] # 각 row의 movie, user Id를 따옴
        if (user not in neighbors) or (movie not in movies): # 만약 해당 user의 neighbor data가 없거나, movie가 train movie 목록에 없다면
            predicted.append(None) # 그 데이터에 관해서는 test를 할 수 없음
        else: predicted.append(prediction(user, movie, neighbors, utility_matrix)) # 아니라면 예측을 합니다
    return predicted

neighbors = find_neighbors(utility_matrix, 10, cos_sim)

test['prediction'] = testing(test, neighbors, utility_matrix) # 위 함수를 활용한 예측 칼럼을 만듦
test['diff'] = test['rate'] - test['prediction'] # 실제와 예측 간의 차이(=error)를 담은 column을 만듦
print(test['diff'].apply(abs).mean())

## -> 최종 absolute error의 평균 1.134149444475531가 나옵니다.

# SQL 1

# QUEST 1. quest1 table 이용. 10,000원 이상이거나 재고액이 200,000이상인 제품들의 no, 가격, 재고수량, 재고액을 구해보세요. (열 이름 별칭 사용)

# QUEST 2. sample2 table 이용. 사람들의 이름, 나이, 성인 여부를 구해보세요 (열 이름 별칭 사용)

select name, year(current_timestamp)-year(birthday)+1 as age,
case
 when year(current_timestamp)-year(birthday)+1 > 19 then 'yes'
 when year(current_timestamp)-year(birthday)+1 < 20 then 'no'
 else 'unassigned'
end as adult from quest2;
